#!/bin/bash

PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin

# import TENANT_ID, CLIENT_ID CLIENT_SECRET
source .CONFIG

TOKEN_URL="https://login.microsoftonline.com"
TOKEN_URL+="/$TENANT_ID/oauth2/v2.0/token"
API_BASE_URL="https://graph.microsoft.com/v1.0"
ACCESS_TOKEN_FILE=.ACCESS_TOKEN
REQUEST_TIMEOUT_MS=5000

function check_jq() {
  if ! which jq &>/dev/null; then
    echo "dependency 'jq' (json parser) not found" 1>&2
    exit 1
  fi
}

function get_new_token() {
  # shellcheck disable=SC2046,SC2005
  read -r expires_in token_type access_token < <(echo $(
    curl \
      --silent \
      --fail \
      --location \
      --max-time "$REQUEST_TIMEOUT_MS" \
      --request POST "$TOKEN_URL" \
      --header "Content-Type: application/x-www-form-urlencoded" \
      --data-urlencode "grant_type=client_credentials" \
      --data-urlencode "client_id=$CLIENT_ID" \
      --data-urlencode "client_secret=$CLIENT_SECRET" \
      --data-urlencode "scope=https://graph.microsoft.com/.default" |
      jq --raw-output '.expires_in, .token_type, .access_token'
  ))
  expiration=$((expires_in + $(date +%s)))
  printf "expiration=%s\ntoken_type=%s\naccess_token=%s\n" \
    "$expiration" "$token_type" "$access_token" >"$ACCESS_TOKEN_FILE"
}

function get_existing_or_new_token() {
  local now
  now="$(date +%s)"
  # shellcheck disable=SC1090
  if ! source "$ACCESS_TOKEN_FILE" || ((expiration < now)); then
    get_new_token
  fi
}

function get_device_management() {
  local endpoint
  endpoint="$1"
  curl \
    --silent \
    --fail \
    --location \
    --max-time "$REQUEST_TIMEOUT_MS" \
    --request GET "$API_BASE_URL/deviceManagement/$endpoint" \
    --header "Authorization: $token_type $access_token" |
    jq .
}

function main() {
  check_jq
  get_existing_or_new_token
  get_device_management "managedDevices"
}

main
